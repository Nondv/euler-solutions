* Utils
** Eratosthenes sieve

#+BEGIN_SRC clojure :ns utils :results output
(defn eratosthenes-sieve
  ([n] (eratosthenes-sieve (list 2) #{} n))
  ([sieve composites-set n]
    (let [prime (first sieve)
          next-composites-set (loop [i (+ prime prime), result composites-set]
                                (if (> i n) result (recur (+ i prime) (conj result i))))

          is-prime? #(not (contains? next-composites-set %))

          ;; next-prime (first (filter is-prime? (iterate inc (inc prime))))
          next-prime (loop [x (inc prime)] (if (is-prime? x) x (recur (inc x))))]
      (if (> next-prime n)
        sieve
        (recur (cons next-prime sieve) next-composites-set n)))))

(println (eratosthenes-sieve 20))
#+END_SRC

#+RESULTS:
: (19 17 13 11 7 5 3 2)

** Digits

#+BEGIN_SRC clojure :ns utils :session with-utils :results output
(defn digits [n]
  (loop [x n, result '()]
    (if (= x 0)
      result
      (recur (quot x 10) (conj result (mod x 10))))))

(println (digits 567))
#+END_SRC

#+RESULTS:
: (5 6 7)

* DONE 1. Multiples of 3 and 5

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get
3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

#+BEGIN_SRC scala
(1 to 999).filter(x => x % 3 == 0 || x % 5 == 0).sum
#+END_SRC

#+RESULTS:
: res38: Int = 233168

#+BEGIN_SRC clojure
(let [numbers (range 1 1000)
      condition #(or (= (mod % 3) 0) (= (mod % 5) 0))]
  (reduce + 0 (filter condition numbers)))
#+END_SRC

#+RESULTS:
: 233168

* DONE 2.Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

#+BEGIN_SRC clojure :results output
(def fibs
  (loop [result (list 2 1)]
    (let [next-element (reduce + 0 (take 2 result))]
      (if (> next-element 4000000)
        result
        (recur (cons next-element result))))))

(println (reduce #(if (even? %2) (+ %1 %2) %1) 0 fibs))

(defn fib
  ([] (fib 1 2))
  ([a b] (lazy-seq (cons a (fib b (+ a b))))))

(def result
  (->> (fib)
    (take-while #(<= % 4000000))
    (filter even?)
    (reduce +)))

(println result)
#+END_SRC

#+RESULTS:
: 4613732
: 4613732

* DONE 3. Largest prime factor

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?

#+BEGIN_SRC clojure :results output
(def number 600851475143)
(def factors (filter #(= 0 (mod number %)) (utils/eratosthenes-sieve (int (Math/sqrt number)))))
(println (first factors))
#+END_SRC

#+RESULTS:

* TODO 4. Largest palindrome product

A palindromic number reads the same both ways. The largest palindrome made from
the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.

#+BEGIN_SRC clojure :ns euler-4 :session with-utils
(def limit (* 999 999))

(defn previous-palindrome [x]
  )

(utils/digits 123)
#+END_SRC

#+RESULTS:
: #'user/limit#'user/previous-palindromeclass clojure.lang.Compiler$CompilerExceptionclass clojure.lang.Compiler$CompilerExceptionSyntax error compiling at (*cider-repl Desktop/euler:localhost:64377(clj)*:6:1).
: No such namespace: utils

* DONE 5. Smallest multiple

2520 is the smallest number that can be divided by each of the numbers from 1 to
10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the
numbers from 1 to 20?

#+BEGIN_SRC clojure :results output
(def sieve (eratosthenes-sieve 20))
(defn prime-factors [n]
  (filter
    #(zero? (mod n %))
    (take-while #(>= % n) sieve)))

(defn factor-power [n factor]
  (loop [x n, result 0]
    (if (zero? (mod x factor))
      (recur (/ x factor) (inc result))
      result)))

(defn prime-factors [n]
  (reduce
    (fn [acc factor]
      (let [power (factor-power n factor)]
        (if (= power 0)
          acc
          (assoc acc factor power))))
    {}
    sieve))

(def result-prime-factors
  (reduce
    #(merge-with max %1 (prime-factors %2))
    {}
    (range 2 21)))

(def result
  (int (reduce-kv #(* %1 (Math/pow %2 %3)) 1 result-prime-factors)))

(println result)
#+END_SRC

#+RESULTS:
: 232792560

* DONE 6. Sum square difference

The sum of the squares of the first ten natural numbers is,

\begin{equation}
1^2 + 2^2 + ... + 10^2 = 385
\end{equation}

The square of the sum of the first ten natural numbers is,

\begin{equation}
(1 + 2 + ... + 10)^2 = 55^2 = 3025
\end{equation}

Hence the difference between the sum of the squares of the first ten natural
numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred
natural numbers and the square of the sum.

** Naive solution

#+BEGIN_SRC clojure :results output
(def numbers (range 1 101))
(defn sqr [x] (* x x))

(println (- (sqr (reduce + numbers)) (reduce #(+ %1 (sqr %2)) 0 numbers)))

#+END_SRC

#+RESULTS:
: 25164150

* TODO 7.10001st prime

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that
the 6th prime is 13.

What is the 10 001st prime number?

* TODO 8.Largest product in a series

The four adjacent digits in the 1000-digit number that have the greatest product
are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the
greatest product. What is the value of this product?

* TODO 9. Special Pythagorean triplet

A Pythagorean triplet is a set of three natural numbers, =a < b < c=, for which,

=a^2 + b^2 = c^2=

For example, =3^2 + 4^2 = 9 + 16 = 25 = 5^2=.

There exists exactly one Pythagorean triplet for which =a + b + c = 1000=.
Find the product =abc=.

* DONE 10. Summation of primes

The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.

#+BEGIN_SRC clojure
(reduce + (eratosthenes-sieve 2000000))
#+END_SRC

#+RESULTS:
: 142913828922
* TODO 11. Largest product in a grid

In the 20×20 grid below, four numbers along a diagonal line have been marked in
red.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

What is the greatest product of four adjacent numbers in the same direction
(up, down, left, right, or diagonally) in the 20×20 grid?
* TODO 12. Highly divisible triangular number
* TODO 13. Large sum
* DONE 31. Coin sums

In England the currency is made up of pound, £, and pence, p, and there are
eight coins in general circulation:

1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).

It is possible to make £2 in the following way:

1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p

How many different ways can £2 be made using any number of coins?


#+BEGIN_SRC clojure :results output
(def values (list 1 2 5 10 20 50 100 200))

(defn ways [n coin-types]
  (if (empty? coin-types)
    (if (= n 0) 1 0)
    (reduce
      #(+ %1 (ways (- n %2) (rest coin-types)))
      0
      (range 0 (inc n) (first coin-types)))))

(println (ways 200 values))
#+END_SRC

#+RESULTS:
: 73682

#+BEGIN_SRC clojure

#+END_SRC

* TODO 35. Circular primes

The number, 197, is called a circular prime because all rotations of the digits:
197, 971, and 719, are themselves prime.

There are thirteen such primes below 100:
2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.

How many circular primes are there below one million?


#+BEGIN_SRC clojure :results output
;; (eratosthenes-sieve 1000000)
(defn digits [n]
  (loop [x n, res '()]
    (if (zero? x)
      res
      (recur (quot x 10) (cons (mod x 10) res)))))
(println (eratosthenes-sieve 100))
(println
(->> (eratosthenes-sieve 100)
  (map (comp sort digits))
  frequencies
  (filter (fn [[k v]] (= v (count k))))
  (reduce (fn [acc [k v]] (+ acc v)) 0)))

;; (println (frequencies (map (comp sort digits) (eratosthenes-sieve 100))))
;;(println (frequencies (map #(sort (digits %)) (range 100))))

#+END_SRC

#+RESULTS:
: (97 89 83 79 73 71 67 61 59 53 47 43 41 37 31 29 23 19 17 13 11 7 5 3 2)
: 12
